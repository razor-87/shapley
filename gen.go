//go:build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"math/big"
	"os"
)

//go:generate go run gen.go

const upperLimit = 33

func main() {
	buf := bytes.NewBuffer([]byte(`// Code generated by go generate gen.go; DO NOT EDIT.`))

	fmt.Fprintln(buf, "\n\npackage main")
	fmt.Fprintf(buf, "\n%s%d%s\n", "var weights = [", upperLimit, "][]float64{")
	fmt.Fprintln(buf, "\t{},")
	fmt.Fprintln(buf, "\t{},")
	for n := 2; n < upperLimit; n++ {
		fmt.Fprint(buf, "\t{0")
		for k := 1; k < n; k++ {
			fmt.Fprint(buf, ",")
			weight := new(big.Float).Quo(new(big.Float).Mul(factorial(k), factorial(n-k-1)), factorial(n))
			fmt.Fprintf(buf, "%g", weight)
		}
		fmt.Fprintln(buf, "},")
	}
	fmt.Fprintln(buf, "}")

	out, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	err = os.WriteFile("weights.go", out, 0666)
	if err != nil {
		log.Fatal(err)
	}
}

func factorial(n int) *big.Float {
	return factorials[n]
}

var factorials = [upperLimit]*big.Float{
	big.NewFloat(1),
	big.NewFloat(1),
	big.NewFloat(2),
	big.NewFloat(6),
	big.NewFloat(24),
	big.NewFloat(120),
	big.NewFloat(720),
	big.NewFloat(5040),
	big.NewFloat(40320),
	big.NewFloat(362880),
	big.NewFloat(3628800),
	big.NewFloat(39916800),
	big.NewFloat(479001600),
	big.NewFloat(6227020800),
	big.NewFloat(87178291200),
	big.NewFloat(1307674368000),
	big.NewFloat(20922789888000),
	big.NewFloat(355687428096000),
	big.NewFloat(6402373705728000),
	big.NewFloat(121645100408832000),
	big.NewFloat(2432902008176640000),
	big.NewFloat(51090942171709440000),
	big.NewFloat(1124000727777607680000),
	big.NewFloat(25852016738884976640000),
	big.NewFloat(620448401733239439360000),
	big.NewFloat(15511210043330985984000000),
	big.NewFloat(403291461126605635584000000),
	big.NewFloat(10888869450418352160768000000),
	big.NewFloat(304888344611713860501504000000),
	big.NewFloat(8841761993739701954543616000000),
	big.NewFloat(265252859812191058636308480000000),
	big.NewFloat(8222838654177922817725562880000000),
	big.NewFloat(263130836933693530167218012160000000),
}
